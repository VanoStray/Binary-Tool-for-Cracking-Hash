package Bytes;

public class BinBaseConverter {
    private final String rangeChars;
    private final int base;

    public BinBaseConverter(String rangeChars) {
        this.rangeChars = rangeChars;
        this.base = rangeChars.length();
    }


    public String convertToBaseString(byte[] bytes){

        long decimalValue = 0;
        for (int i = 0; i < 5; i++) {
            decimalValue = (decimalValue << 8) | (bytes[i] & 0xFF); // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–π—Ç –≤ —á–∏—Å–ª–æ
        }

        if (decimalValue < 0) throw new IllegalArgumentException("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!");

        StringBuilder result = new StringBuilder();
        while (decimalValue > 0) {
            int index = (int) (decimalValue % base); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–∏–º–≤–æ–ª–∞
            result.insert(0, rangeChars.charAt(index)); // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª
            decimalValue /= base; // –î–µ–ª–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        }

        return result.length() > 0 ? result.toString() : String.valueOf(rangeChars.charAt(0)); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º "0", –µ—Å–ª–∏ —á–∏—Å–ª–æ –±—ã–ª–æ 0
    }

    // üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç `long` –≤ —Å—Ç—Ä–æ–∫—É —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º `base`
    public String convertToBaseString(long decimalValue) {
        if (decimalValue < 0) throw new IllegalArgumentException("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!");

        StringBuilder result = new StringBuilder();
        while (decimalValue > 0) {
            int index = (int) (decimalValue % base); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–∏–º–≤–æ–ª–∞
            result.insert(0, rangeChars.charAt(index)); // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª
            decimalValue /= base; // –î–µ–ª–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        }

        return result.length() > 0 ? result.toString() : String.valueOf(rangeChars.charAt(0)); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º "0", –µ—Å–ª–∏ —á–∏—Å–ª–æ –±—ã–ª–æ 0
    }
}
