package Bytes;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.math.BigInteger;

public class BinFileAccessor {
    private final String filePath;
    private static final int ELEMENT_SIZE = 5;

    public BinFileAccessor(String filePath) {
        this.filePath = filePath;
    }

    // üîπ –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    public byte[] getElement(long index) {
        long byteOffset = index * ELEMENT_SIZE; // –°–º–µ—â–µ–Ω–∏–µ –ø–æ —Ñ–∞–π–ª—É
        byte[] buffer = new byte[ELEMENT_SIZE];

        try (RandomAccessFile raf = new RandomAccessFile(filePath, "r")) {
            if (byteOffset >= raf.length()) {
                return null;
            }

            raf.seek(byteOffset);
            raf.readFully(buffer);

            return buffer; // üîπ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º 5 –±–∞–π—Ç –∫–∞–∫ —á–∏—Å–ª–æ
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    // üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    public long getTotalElements() {

        try (RandomAccessFile raf = new RandomAccessFile(filePath, "r")) {
            long fileLength = raf.length();

            return raf.length() / ELEMENT_SIZE; // üî• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 5-–±–∞–π—Ç–æ–≤—ã—Ö —á–∏—Å–µ–ª
        } catch (IOException e) {
            e.printStackTrace();
            return -1;
        }
    }
}
