import java.io.IOException;
import java.io.RandomAccessFile;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;

public class DictionarySplitter {
    private final String filePath;
    private final int symbolsPerElement;

    public DictionarySplitter(String filePath, int symbolsPerElement) {
        this.filePath = filePath;
        this.symbolsPerElement = symbolsPerElement;
    }

    public void split(String outPath, long minIndex, long maxIndex) {
        int bytesPerChar = 2; // UTF-16BE ‚Üí 2 –±–∞–π—Ç–∞ –Ω–∞ —Å–∏–º–≤–æ–ª
        long byteOffset = minIndex * symbolsPerElement * bytesPerChar;
        long bytesToRead = (maxIndex - minIndex) * symbolsPerElement * bytesPerChar;

        try (RandomAccessFile raf = new RandomAccessFile(filePath, "r");
             FileOutputStream fos = new FileOutputStream(outPath);
             OutputStreamWriter writer = new OutputStreamWriter(fos, StandardCharsets.UTF_16BE)) {

            long fileLength = raf.length();

            if (byteOffset >= fileLength) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ñ–∞–π–ª–∞.");
                return;
            }
            if (byteOffset + bytesToRead > fileLength) {
                bytesToRead = fileLength - byteOffset; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ñ–∞–π–ª
            }

            byte[] buffer = new byte[(int) bytesToRead];
            raf.seek(byteOffset);
            raf.readFully(buffer); // –ß–∏—Ç–∞–µ–º –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º

            // üî• –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º `byte[]` –≤ `String` –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
            String content = new String(buffer, StandardCharsets.UTF_16BE);
            writer.write(content);

            System.out.println("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: " + outPath);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
